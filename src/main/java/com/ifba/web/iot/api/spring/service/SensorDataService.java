package com.ifba.web.iot.api.spring.service;

import org.apache.commons.lang3.tuple.Triple;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.ifba.web.iot.api.spring.amqp.AmqpPublisher;
import com.ifba.web.iot.api.spring.controller.dto.update.SensorUpdateDTO;
import com.ifba.web.iot.api.spring.controller.dto.view.SensorView;
import com.ifba.web.iot.api.spring.model.Alert;
import com.ifba.web.iot.api.spring.model.SensorData;
import com.ifba.web.iot.api.spring.model.Usuario;
import com.ifba.web.iot.api.spring.mqtt.MqttPublisher;
import com.ifba.web.iot.api.spring.mqtt.MqttToAmqpBridge;
import com.ifba.web.iot.api.spring.repository.SensorDataRepository;
import com.ifba.web.iot.api.spring.repository.UsuarioRepository;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import java.security.Principal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * **Servi√ßo de Gerenciamento de Dados de Sensores**
 *
 * <p>
 * Esta classe de servi√ßo (`@Service`) centraliza a l√≥gica de neg√≥cio
 * relacionada aos dados dos sensores.
 * Ela coordena a persist√™ncia dos dados, a detec√ß√£o de alertas, e a comunica√ß√£o
 * ass√≠ncrona com outros sistemas atrav√©s dos protocolos MQTT e AMQP.
 * </p>
 *
 * <p>
 * A anota√ß√£o `@RequiredArgsConstructor` do Lombok gera um construtor com os
 * campos
 * `final`, facilitando a inje√ß√£o de depend√™ncias de forma concisa.
 * </p>
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class SensorDataService {

    private final SensorDataRepository sensorDataRepository;
    private final UsuarioRepository usuarioRepository;
    private final AlertService alertService;
    private final MqttPublisher mqttPublisher;
    private final AmqpPublisher amqpPublisher;
    private final MqttToAmqpBridge mqttToAmqpBridge;

    /**
     * **Busca Todos os Registros de Sensores**
     *
     * <p>
     * Recupera todos os registros de dados de sensores persistidos no banco de
     * dados.
     * Este m√©todo √© marcado como somente leitura (`@Transactional(readOnly =
     * true)`) para
     * otimizar o desempenho de consultas.
     * </p>
     *
     * @return Uma `List` de objetos {@link SensorData} representando todos os
     *         registros.
     */
    @Transactional(readOnly = true)
    public List<SensorData> findAll() {
        return sensorDataRepository.findAll();
    }

    /**
     * **SOBRECARGA 1: Salva e processa dados a partir de uma requisi√ß√£o de API.**
     * <p>
     * Este m√©todo √© usado por endpoints da API. Ele usa o `Principal` para
     * encontrar
     * o usu√°rio autenticado e, em seguida, chama a l√≥gica de processamento
     * principal.
     * </p>
     *
     * @param sensorData O objeto de dados do sensor.
     * @param principal  O objeto de seguran√ßa do usu√°rio autenticado.
     * @return Um {@link Triple} com a mensagem de alerta, os dados salvos e a
     *         mensagem do protocolo.
     */
    @Transactional
    public Triple<String, SensorData, String> saveAndProcess(SensorData sensorData, Principal principal) {
        if (principal == null) {
            log.error("‚ùå Erro: Tentativa de criar sensor sem usu√°rio autenticado.");
            throw new AccessDeniedException("Usu√°rio n√£o autenticado. Acesso negado.");
        }

        Usuario usuario = usuarioRepository.findByEmail(principal.getName())
                .orElseThrow(() -> new AccessDeniedException("Usu√°rio n√£o encontrado. Acesso negado."));

        return processAndSave(sensorData, usuario);
    }

    /**
     * **SOBRECARGA 2: Salva e processa dados a partir de um agendador interno.**
     * <p>
     * Este m√©todo √© usado por processos internos, como o `SensorScheduler`, que j√°
     * fornecem o objeto de usu√°rio.
     * </p>
     *
     * @param sensorData O objeto de dados do sensor.
     * @param usuario    O objeto do usu√°rio a ser associado aos dados.
     * @return Um {@link Triple} com a mensagem de alerta, os dados salvos e a
     *         mensagem do protocolo.
     */
    @Transactional
    public Triple<String, SensorData, String> saveAndProcess(SensorData sensorData, Usuario usuario) {
        if (usuario == null) {
            log.error("‚ùå Erro: Tentativa de processar dados com usu√°rio nulo.");
            throw new IllegalArgumentException("O usu√°rio n√£o pode ser nulo para esta opera√ß√£o.");
        }
        return processAndSave(sensorData, usuario);
    }

    /**
     * **M√©todo Privado para a L√≥gica Principal de Salvamento e Processamento.**
     * <p>
     * Este m√©todo encapsula toda a l√≥gica de neg√≥cio principal, evitando duplica√ß√£o
     * de c√≥digo entre os m√©todos p√∫blicos.
     * </p>
     *
     * @param sensorData O objeto de dados do sensor.
     * @param usuario    O objeto do usu√°rio a ser associado.
     * @return Um {@link Triple} com a mensagem de alerta, os dados salvos e a
     *         mensagem do protocolo.
     */
    private Triple<String, SensorData, String> processAndSave(SensorData sensorData, Usuario usuario) {
        log.info("üì• Iniciando o salvamento e processamento dos dados do sensor...");

        sensorData.setUsuario(usuario);
        log.info("üë§ Associando a leitura ao usu√°rio: {}", usuario.getNome());

        String sensor = Objects.requireNonNull(sensorData.getSensor(), "O tipo do sensor n√£o pode ser nulo.");
        double valor = sensorData.getValor();
        sensorData.setTimestamp(LocalDateTime.now());

        // Define unidade de medida conforme tipo de sensor
        switch (sensor) {
            case "temperatura":
                sensorData.setUnidade("¬∞C");
                break;
            case "umidade":
                sensorData.setUnidade("%");
                break;
            case "luminosidade":
                sensorData.setUnidade("lux");
                break;
            default:
                log.warn("‚ö†Ô∏è Tipo de sensor desconhecido: {}", sensor);
        }

        log.debug("üìä Dados recebidos: {}", sensorData);

        String alertMessage = verificarAlerta(sensorData);

        // Salvar alerta no banco de dados, se houver
        if (alertMessage != null) {
            log.warn("‚ö†Ô∏è Alerta gerado: {}", alertMessage);
            if (alertService.isAlertSavingEnabled()) {
                Alert alert = new Alert(sensor, valor, sensorData.getUnidade(), alertMessage);
                alertService.saveAlert(alert);
                log.info("üíæ Alerta salvo no banco de dados.");
            } else {
                log.info("üõë Salvamento de alertas desativado. Alerta n√£o persistido.");
            }
        } else {
            log.info("‚úÖ Nenhum alerta necess√°rio. Dados dentro dos par√¢metros normais.");
        }

        SensorData saved = sensorDataRepository.save(sensorData);
        log.info("üíæ Dados do sensor salvos com sucesso. ID: {}", saved.getId());

        // Publica√ß√£o dos dados conforme tipo do sensor
        String protocoloMsg = null;
        if ("temperatura".equals(sensor)) {
            protocoloMsg = mqttPublisher.publish(saved);
            log.info("üì° Dados de temperatura publicados via MQTT:\n{}", saved);
            mqttToAmqpBridge.forwardToQueue(saved);
        } else {
            protocoloMsg = amqpPublisher.publish(saved);
            log.info("üì° Dados publicados via AMQP:\n{}", saved);
        }

        log.info("‚úÖ Finalizado o processo de salvamento e publica√ß√£o dos dados do sensor.");
        return Triple.of(alertMessage, saved, protocoloMsg);
    }

    /**
     * **Busca um Registro de Sensor por ID**
     *
     * <p>
     * Encontra uma entidade {@link SensorData} no banco de dados a partir de seu
     * ID.
     * Este m√©todo √© transacional e retorna `null` se o registro n√£o for encontrado.
     * </p>
     *
     * @param id O ID do registro de sensor a ser buscado.
     * @return O objeto {@link SensorData} correspondente ao ID, ou `null` se n√£o
     *         existir.
     */
    @Transactional
    public SensorData findById(Long id) {
        return sensorDataRepository.findById(id).orElse(null);
    }

    /**
     * **Verifica a Propriedade de um Sensor**
     *
     * <p>
     * Este √© o mecanismo de defesa contra o IDOR. Ele consulta o reposit√≥rio para
     * verificar se o sensor com o ID fornecido pertence ao usu√°rio especificado.
     * </p>
     *
     * @param username O nome de usu√°rio do propriet√°rio em potencial.
     * @param sensorId O ID do sensor a ser verificado.
     * @return {@code true} se o sensor pertencer ao usu√°rio, {@code false} caso
     *         contr√°rio.
     */
    @Transactional(readOnly = true)
    public boolean isUserSensorOwner(String username, Long sensorId) {
        // Encontra o sensor pelo ID.
        Optional<SensorData> sensorOptional = sensorDataRepository.findById(sensorId);

        // Se o sensor existir, verifica se o nome de usu√°rio do propriet√°rio
        // (acessado atrav√©s da entidade 'Usuario') corresponde ao nome de usu√°rio
        // fornecido.
        if (sensorOptional.isPresent()) {
            SensorData sensor = sensorOptional.get();
            // Acessa o objeto 'Usuario' e obt√©m o nome de usu√°rio para a compara√ß√£o.
            return sensor.getUsuario().getEmail().equals(username);
        }

        // Se o sensor n√£o for encontrado, ele n√£o pertence ao usu√°rio.
        return false;
    }

    /**
     * **Atualiza os Dados de um Sensor Existente**
     *
     * <p>
     * Este m√©todo agora recebe o nome de usu√°rio autenticado do controller para
     * garantir que a opera√ß√£o seja segura. Ele valida a propriedade do sensor
     * antes de prosseguir com a atualiza√ß√£o.
     * </p>
     *
     * @param currentUsername O nome de usu√°rio do usu√°rio autenticado.
     * @param id              O ID do sensor a ser atualizado.
     * @param updatedDTO      O DTO {@link SensorUpdateDTO} contendo os novos dados
     *                        do sensor.
     * @return O objeto {@link SensorView} com os dados atualizados, ou {@code null}
     *         se o
     *         registro original n√£o for encontrado ou se o usu√°rio n√£o for o
     *         propriet√°rio.
     */
    @Transactional
    public SensorView update(String currentUsername, Long id, SensorUpdateDTO updatedDTO) {
        // üö® Mecanismo de defesa: verifica a propriedade do sensor.
        // A l√≥gica de bloqueio de acesso n√£o autorizado deve estar no controller,
        // mas √© essencial que o servi√ßo forne√ßa o m√©todo de verifica√ß√£o.
        if (!isUserSensorOwner(currentUsername, id)) {
            // Retorna null para sinalizar ao controller que a opera√ß√£o falhou
            // por falta de autoriza√ß√£o.
            return null;
        }

        SensorData existingData = sensorDataRepository.findById(id).orElse(null);
        if (existingData != null) {
            existingData.setSensor(updatedDTO.getSensor());
            existingData.setValor(updatedDTO.getValor());
            SensorData savedData = sensorDataRepository.save(existingData);
            return new SensorView("Dados atualizados com sucesso", savedData, "HTTP");
        }
        return null;
    }

    /**
     * **Busca o Registro de Sensor Mais Recente**
     *
     * <p>
     * Recupera o registro de sensor mais recente do banco de dados, ordenando-o
     * pela data e hora de registro em ordem decrescente.
     * </p>
     *
     * @return O objeto {@link SensorData} com o timestamp mais recente,
     *         ou `null` se o banco de dados n√£o contiver registros.
     */
    public SensorData findLatest() {
        return sensorDataRepository.findFirstByOrderByTimestampDesc().orElse(null);
    }

    /**
     * **Verifica a Ocorr√™ncia de Alertas**
     *
     * <p>
     * Este m√©todo utilit√°rio checa se os dados de um sensor excedem limites
     * pr√©-definidos. Ele √© chamado por outros m√©todos de servi√ßo para
     * determinar a necessidade de gerar uma mensagem de alerta.
     * </p>
     *
     * @param data O objeto {@link SensorData} contendo os dados a serem
     *             verificados.
     * @return Uma `String` com a mensagem de alerta se os limites forem excedidos,
     *         ou `null` caso os dados estejam dentro do normal.
     */
    public String verificarAlerta(SensorData data) {
        String alertMessage = null;
        if ("temperatura".equals(data.getSensor()) && data.getValor() > 30) {
            alertMessage = "üå°Ô∏è Alerta! Temperatura elevada detectada.";
        } else if ("umidade".equals(data.getSensor()) && (data.getValor() < 20 || data.getValor() > 80)) {
            alertMessage = "üíß Alerta! Umidade baixa detectada.";
        } else if ("luminosidade".equals(data.getSensor()) && data.getValor() < 200) {
            alertMessage = "üí° Alerta! Baixo n√≠vel de luminosidade detectado. Acione as luzes auxiliares.";
        }
        return alertMessage;
    }
}
