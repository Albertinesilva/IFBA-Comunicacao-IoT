package com.ifba.web.iot.api.spring.controller;

import org.apache.commons.lang3.tuple.Triple;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import com.ifba.web.iot.api.spring.amqp.AmqpPublisher;
import com.ifba.web.iot.api.spring.controller.dto.update.SensorUpdateDTO;
import com.ifba.web.iot.api.spring.controller.dto.view.SensorView;
import com.ifba.web.iot.api.spring.model.Alert;
import com.ifba.web.iot.api.spring.model.SensorData;
import com.ifba.web.iot.api.spring.mqtt.MqttPublisher;
import com.ifba.web.iot.api.spring.service.AlertService;
import com.ifba.web.iot.api.spring.service.SensorDataService;
import lombok.extern.slf4j.Slf4j;

import java.security.Principal;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Controlador REST respons√°vel pelo gerenciamento das leituras de sensores.
 */
@Slf4j
@RestController
@RequestMapping("/api/sensores")
public class SensorDataController {

    @Autowired
    private SensorDataService sensorService;

    @Autowired
    private AmqpPublisher amqpPublisher;

    @Autowired
    private MqttPublisher mqttPublisher;

    @Autowired
    private AlertService alertService;

    /**
     * Retorna todas as leituras de sensores registradas no sistema.
     *
     * @return Lista de objetos {@link SensorData}.
     */
    @GetMapping
    public List<SensorData> getAll() {
        return sensorService.findAll();
    }

    /**
     * Retorna o hist√≥rico de todos os alertas registrados no sistema.
     * <p>
     * Este endpoint utiliza o servi√ßo {@link AlertService} para buscar todos
     * os registros da tabela de alertas.
     * </p>
     *
     * @return Lista de objetos {@link Alert}.
     */
    @GetMapping("/alertas")
    public List<Alert> getAllAlerts() {
        return alertService.findAll();
    }

    /**
     * Define se o salvamento de alertas deve ser ativado ou desativado.
     * <p>
     * Este endpoint utiliza um PUT para alterar o estado de salvamento de alertas
     * para `true` (ativado) ou `false` (desativado).
     * </p>
     *
     * @param status O novo status do salvamento de alertas.
     * @return {@link ResponseEntity} com uma mensagem de confirma√ß√£o.
     */
    @PutMapping("/alertas/status/{status}")
    public ResponseEntity<String> setAlertSavingStatus(@PathVariable boolean status) {
        alertService.setAlertSavingEnabled(status);
        String message = status ? "‚úÖ Salvamento de alertas ativado." : "üõë Salvamento de alertas desativado.";
        log.info(message);
        return ResponseEntity.ok(message);
    }

    /**
     * Cria uma nova leitura de sensor, processa poss√≠veis alertas e envia
     * a leitura via protocolo apropriado (AMQP ou MQTT).
     *
     * @param sensorData Dados da leitura do sensor recebidos no corpo da
     *                   requisi√ß√£o.
     * @return {@link ResponseEntity} com uma mensagem de resposta e os dados
     *         registrados.
     */
    @PostMapping
    public ResponseEntity<SensorView> create(@RequestBody SensorData sensorData, Principal principal) {
        log.info("üì• Recebida solicita√ß√£o para cria√ß√£o de dados do sensor...");

        Triple<String, SensorData, String> result = sensorService.saveAndProcess(sensorData, principal);
        log.info("üìå Tipo: {} | Valor: {} | Unidade (pr√©-processamento): {}",
                sensorData.getSensor(), sensorData.getValor(), sensorData.getUnidade());

        String alertMessage = result.getLeft();
        SensorData data = result.getMiddle();
        String protocoloMsg = result.getRight();

        if (alertMessage != null) {
            log.warn("‚ö†Ô∏è Alerta gerado ap√≥s an√°lise dos dados: {}", alertMessage);
        } else {
            log.info("‚úÖ Nenhum alerta necess√°rio. Dados dentro dos par√¢metros normais.");
        }

        log.info("üíæ Dados processados e salvos com sucesso. ID: {}, Unidade: {}, Valor: {}",
                data.getId(), data.getUnidade(), data.getValor());
        log.info("üì° Mensagem publicada via protocolo: {}", protocoloMsg);

        String finalMessage = (alertMessage != null)
                ? alertMessage
                : "‚úÖ Leitura registrada com sucesso na fazenda.";

        log.info("üì§ Mensagem final de resposta: {}", finalMessage);

        return ResponseEntity.ok(new SensorView(finalMessage, data, protocoloMsg));
    }

    /**
     * Manipula a requisi√ß√£o HTTP PUT para atualizar um sensor existente.
     * <p>
     * Este endpoint permite a atualiza√ß√£o de um sensor espec√≠fico identificado pelo
     * seu ID.
     * Ele extrai o ID do usu√°rio autenticado para fins de logging de seguran√ßa.
     *
     * <p>
     * <b>Vulnerabilidade de Seguran√ßa (IDOR)</b>
     * <p>
     * Como a l√≥gica de autoriza√ß√£o para garantir que o usu√°rio s√≥ possa atualizar
     * seus
     * pr√≥prios sensores est√° ausente, este m√©todo possui uma vulnerabilidade
     * de IDOR (Insecure Direct Object Reference). Um atacante poderia usar
     * o token de um usu√°rio para atualizar o sensor de outro usu√°rio,
     * simplesmente adivinhando ou alterando o ID na URL.
     *
     * @param id        O ID do sensor a ser atualizado. √â extra√≠do do caminho da
     *                  URL.
     * @param updateDTO O objeto de transfer√™ncia de dados (DTO) contendo as
     *                  informa√ß√µes
     *                  atualizadas do sensor.
     * @return Um {@link org.springframework.http.ResponseEntity} com o
     *         {@link br.com.example.view.SensorView}
     *         atualizado e o status HTTP 200 (OK) se a atualiza√ß√£o for
     *         bem-sucedida.
     *         Retorna um status HTTP 404 (Not Found) se o sensor com o ID fornecido
     *         n√£o for
     *         encontrado.
     */
    @PutMapping("/{id}")
    public ResponseEntity<SensorView> update(@PathVariable Long id, @RequestBody SensorUpdateDTO updateDTO) {
        // Obt√©m o nome de usu√°rio (ID) do contexto de seguran√ßa
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String currentUsername = authentication.getName();

        // üö® LOG PARA A SIMULA√á√ÉO DO ATAQUE
        log.info("üö® Simula√ß√£o de Ataque: Usu√°rio '{}' tentando atualizar o sensor com ID: {}", currentUsername, id);

        // A l√≥gica para encontrar e atualizar √© encapsulada no servi√ßo.
        // A VULNERABILIDADE AINDA EST√Å AQUI, pois o ID do usu√°rio logado N√ÉO √â PASSADO.
        SensorView updatedView = sensorService.update(id, updateDTO);

        if (updatedView == null) {
            log.warn("Sensor com ID {} n√£o encontrado.", id);
            return ResponseEntity.notFound().build();
        }

        log.info("‚úÖ Simula√ß√£o de Ataque: Sensor com ID {} do USU√ÅRIO ALVO atualizado com sucesso por '{}'.", id,
                currentUsername);
        return ResponseEntity.ok(updatedView);
    }

    /**
     * Envia uma leitura de sensor manualmente via protocolo AMQP.
     *
     * @param sensorData Dados da leitura do sensor a ser enviada.
     * @return {@link ResponseEntity} com confirma√ß√£o do envio via AMQP.
     */
    @PostMapping("/enviar/amqp")
    public ResponseEntity<String> enviarAmqp(@RequestBody SensorData sensorData) {
        log.info("üì• Recebida solicita√ß√£o para envio de dados do sensor via AMQP...");
        return ResponseEntity.ok(amqpPublisher.publish(sensorData));
    }

    /**
     * Envia uma leitura de sensor manualmente via protocolo MQTT.
     *
     * @param sensorData Dados da leitura do sensor a ser enviada.
     * @return {@link ResponseEntity} com confirma√ß√£o do envio via MQTT.
     */
    @PostMapping("/enviar/mqtt")
    public ResponseEntity<String> enviarMqtt(@RequestBody SensorData sensorData) {
        log.info("üì• Recebida solicita√ß√£o para envio de dados do sensor via MQTT...");
        return ResponseEntity.ok(mqttPublisher.publish(sensorData));
    }

    // Endpoint para retornar os √∫ltimos dados com alerta
    @GetMapping("/latest")
    public Map<String, Object> getLatest() {
        SensorData latest = sensorService.findLatest();
        Map<String, Object> response = new HashMap<>();
        if (latest != null) {
            String alerta = sensorService.verificarAlerta(latest);

            // Formata o valor para duas casas decimais antes de enviar para o front-end
            DecimalFormat df = new DecimalFormat("#.##");
            String valorFormatado = df.format(latest.getValor());

            response.put("sensor", latest.getSensor());
            response.put("valor", valorFormatado);
            response.put("unidade", latest.getUnidade());
            response.put("alertMessage", alerta);
            response.put("timestamp", latest.getTimestamp());
        }
        return response;
    }
}
